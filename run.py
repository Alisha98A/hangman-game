import gspread
from google.oauth2.service_account import Credentials
import pyfiglet
import random
from rich.console import Console
import os

# Initialize Rich Console
# Ideas taken from:
# https://www.youtube.com/watch?v=4zbehnz-8QU&t=143s
console = Console()

# Define the scopes required for accessing Google Sheets
SCOPE = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive"
]

# Load credentials from a service account file
CREDS = Credentials.from_service_account_file('creds.json')
SCOPED_CREDS = CREDS.with_scopes(SCOPE)

# Authorize the Google Sheets API with the credentials
GSPREAD_CLIENT = gspread.authorize(SCOPED_CREDS)

# Open the spreadsheet titled 'hangman_game'
SHEET = GSPREAD_CLIENT.open('hangman_game')

# Access the 'scoreboard' worksheet within the spreadsheet
scoreboard = SHEET.worksheet('scoreboard')
data = scoreboard.get_all_values()


# Code adapted from Matt Bodden (mentor at Code Institute)
def clear_terminal():
    """
    Clears the terminal window prior to new content.
    """
    os.system('cls' if os.name == 'nt' else 'clear')


# Collection of welcome messages for the game
welcome_messages = [
    "Welcome to Hangman Game!", "Hello there! Ready for some Hangman fun?",
    "Greetings! Let's play Hangman!", "Hi! Ready for a game of Hangman?"
]


# Function for random welcome text using ASCII art generated by 'pyfiglet'
# Code adapted from: https://pypi.org/project/art/
def print_welcome_text():
    random_welcome_message = random.choice(welcome_messages)
    ascii_art = pyfiglet.figlet_format(random_welcome_message)
    console.print(ascii_art, style="bold magenta")


# List of words for the hangman game
# The split method was taken from:
# https://www.w3schools.com/python/ref_string_split.asp
words = """
statement dough blackmail intermediate gallery well reputation resident
operational publisher characteristic bedroom salvation candidate conclusion
knife dash space achievement mastermind copyright dimension onion
possibility proposal guest outside skip crisis astonishing salesperson urgency
lamp replace impact arrogant aunt python proclaim multiply
shareholder mail personality polish cereal storm illusion
""".split()


# Function to display hangman logo
# Code adapted from:
# https://realpython.com/python-main-function/
def print_hangman_logo():
    hangman_logo = """
     _______
    |/      |
    |      (_)
    |      \\|/
    |       |
    |      / \\
    |
   _|___
  |     |______
  |____________|
    """
    console.print(hangman_logo, style="bold yellow")


# Function to display the rules of the hangman game
def print_rules():
    rules = """
    [bold]Rules of Hangman:[/bold]
    1. You need to guess the word letter by letter.
    2. You have a limited number of guesses (""" \
    """[bold red]6 incorrect guesses[/bold red]).
    3. Each incorrect guess brings the man closer to hanging.
    4. If you guess the word before running out of attempts, you """ \
    """[bold green]win[/bold green]!
    5. If the man gets hanged, you """ \
    """[bold red]lose[/bold red].
    """
    console.print(rules)


# Function to select a random word from the list of words
def choose_word():
    """
    Returns a randomly chosen word from the list of words.
    """
    return random.choice(words).upper()


# Function to display the current state of the word with guessed letters
def display_word(word, guessed_letters):
    """
    Displays the current state of the word with guessed letters filled in.
    """
    displayed_word = ''.join([
        letter if letter in guessed_letters else '_'
        for letter in word
    ])
    console.print(f"Word: [bold green]{displayed_word}[/bold green]")


# List of hangman drawings for each stage of the game
# Drawings inspired by:
# https://www.youtube.com/watch?v=WV2zPAVRekY
hangman_stages = [
    """
     _______
    |/      |
    |
    |
    |
    |
    |
   _|___
  |     |______
  |____________|
    """,
    """
     _______
    |/      |
    |      (_)
    |
    |
    |
    |
   _|___
  |     |______
  |____________|
    """,
    """
     _______
    |/      |
    |      (_)
    |       |
    |       |
    |
    |
   _|___
  |     |______
  |____________|
    """,
    """
     _______
    |/      |
    |      (_)
    |      \\|
    |       |
    |
    |
   _|___
  |     |______
  |____________|
    """,
    """
     _______
    |/      |
    |      (_)
    |      \\|/
    |       |
    |
    |
   _|___
  |     |______
  |____________|
    """,
    """
     _______
    |/      |
    |      (_)
    |      \\|/
    |       |
    |      /
    |
   _|___
  |     |______
  |____________|
    """,
    """
     _______
    |/      |
    |      (_)
    |      \\|/
    |       |
    |      / \\
    |
   _|___
  |     |______
  |____________|
    """
]


# Function to print the hangman drawing based on remaining attempts
# Code adapted from https://www.youtube.com/watch?v=XwaEo4f17LU
def print_hangman(attempts):
    console.print(hangman_stages[6 - attempts], style="bold red")


# Function to handle yes/no inputs
def get_yes_no_input(prompt):
    while True:
        response = console.input(prompt).strip().lower()
        if response in ['yes', 'no']:
            return response
        console.print("[bold red]Invalid input. "
                      "Please enter 'yes' or 'no'.[/bold red]")


# Function to update the scoreboard with the player's score
def add_score_to_scoreboard(name, score):
    """
    Add user name and score to the Google Sheets scoreboard.
    """
    try:
        records = scoreboard.get_all_records()
        if not records:
            scoreboard.append_row([name, score])
        else:
            sorted_records = sorted(records,
                                    key=lambda x: int(x['Score']),
                                    reverse=True)[:5]
            lowest_top_score = min(int(record['Score'])
                                   for record in sorted_records)
            if score >= lowest_top_score:
                console.print(f"[bold green]Congratulations, {name} You did it"
                              f" your way to the scoreboard![/bold green]")
            else:
                console.print(f"[bold red]Sorry, {name}. You did not make "
                              f"the scoreboard.[/bold red]")
                return
            scoreboard.append_row([name, score])
    except Exception as e:
        console.print(f"[bold red]Error adding score: {e}[/bold red]")


# Function to display the scoreboard from the Google Sheet
def show_scoreboard():
    console.print("[bold magenta]Scoreboard:[/bold magenta]")
    try:
        headers = scoreboard.row_values(1)
        if 'Name' not in headers or 'Score' not in headers:
            console.print(
                          "[bold red]Headers 'Name' and 'Score'"
                          "not found in the sheet.[/bold red]"
                          )
            return
        records = scoreboard.get_all_records()
        if not records:
            console.print("[bold red]No scores available.[/bold red]")
        else:
            # Sort the records by score in descending order and get the top 5
            sorted_records = sorted(records,
                                    key=lambda x: int(x['Score']),
                                    reverse=True)[:5]
            for record in sorted_records:
                console.print(
                    f"[bold cyan]{record['Name']}[/bold cyan]: "
                    f"[bold green]{record['Score']}[/bold green]"
                    )

    except Exception as e:
        console.print(f"[bold red]Error retrieving scoreboard: {e}[/bold red]")


# Function to prompt the user to either play again or view the scoreboard
def get_play_scoreboard_input(prompt):
    while True:
        response = console.input(prompt).strip().lower()
        if response in ['play', 'scoreboard']:
            return response
        console.print("[bold red]Invalid input.Please enter "
                      "'play' or 'scoreboard'.[/bold red]")


# Function to validate the player's name
def validate_name(name):
    """
    Validate the player's name.
    The name must be between 3 and 20 characters
    long and can only contain letters and numbers.
    """
    if not (3 <= len(name) <= 20):
        console.print("[bold red]Username must be between 3"
                      " and 20 characters long.[/bold red]")
        return False
    if not name.isalnum():
        console.print("[bold red]Name can only contain letters "
                      "and numbers.[/bold red]")
        return False
    return True


# Main function to run the hangman game
# Code inspired by: https://realpython.com/python-hangman/
def main():
    """
    Coordinates the flow of the hangman game,
    including setup, gameplay, and scoring.
    """
    clear_terminal()
    print_welcome_text()

# Prompt the user to see the game rules
    show_rules = get_yes_no_input("[bold white]Would you like to see "
                                  "the rules first? (yes/no):[/bold white] ")
    if show_rules == 'yes':
        # Clear the terminal and display the rules
        clear_terminal()
        print_rules()
        # Display the hangman logo after displaying the rules
        print_hangman_logo()

    # Main game loop
    while True:
        # Ask the user if they're ready to play
        start_game = get_yes_no_input("[bold white]Ready to play? "
                                      "(yes/no): [/bold white] ")

        # Exit the game if the user decides not to play
        if start_game == 'no':
            clear_terminal()
            console.print("[bold yellow]Maybe next time!\n"
                          "If you regret your decision,"
                          " just run the program again :) [/bold yellow]")
            break

        # Start a new game if the user decides to play
        if start_game == 'yes':
            while True:
                clear_terminal()
                # Choose a random word for the game
                word = choose_word()
                guessed_letters = []
                attempts = 6

                # Game loop where the user guesses letters
                while attempts > 0:
                    # Display the current state of the word
                    display_word(word, guessed_letters)

                    # Get the user's guess
                    guess = console.input("Enter a letter: ").strip().upper()

                    # Validate the guess
                    if not guess.isalpha() or len(guess) != 1:
                        console.print("[bold red]Invalid input. Please enter "
                                      "a single letter.[/bold red]")
                        continue

                    # Check if the guess is correct
                    clear_terminal()
                    if guess in guessed_letters:
                        console.print("[bold yellow]You already guessed "
                                      "that letter.[/bold yellow]")

                    elif guess in word:
                        guessed_letters.append(guess)
                        console.print(f"[bold green]Good guess! '{guess}' "
                                      f"is in the word.[/bold green]")

                    else:
                        attempts -= 1
                        guessed_letters.append(guess)
                        console.print(f"[bold red]You answered '{guess}' which"
                                      f" was incorrect. You have {attempts}"
                                      f" attempts left.[/bold red]")
                        print_hangman(attempts)

                    # Check if the game is won
                    if all(letter in guessed_letters for letter in word):
                        clear_terminal()
                        display_word(word, guessed_letters)
                        console.print(f"[bold green]Congratulations! "
                                      f"You guessed the word '{word}'!"
                                      f"[/bold green]")
                        break
                else:
                    # Handle the case where the game is lost
                    clear_terminal()
                    console.print(f"[bold red]Game over! The word was "
                                  f" '{word}'.[/bold red]")
                    print_hangman(0)

                # Ask for player's name and save the score
                while True:
                    player_name = console.input("Enter your name: ").strip()
                    clear_terminal()
                    if validate_name(player_name):
                        break

                # Calculate the score based on the game result
                score = (
                    (len(word) * 10)
                    if all(letter in guessed_letters for letter in word)
                    else 0
                )
                # Update the scoreboard with the player's score
                add_score_to_scoreboard(player_name, score)
                console.print(f"[bold blue]Your score: {score}[/bold blue]")

                # Ask if the player wants to see the scoreboard or play again
                next_action = get_play_scoreboard_input("Do you want to play "
                                                        "again or see the "
                                                        "scoreboard? "
                                                        "(play/scoreboard): ")

                if next_action == 'scoreboard':
                    clear_terminal()
                    show_scoreboard()
                    # After showing the scoreboard:
                    # Ask if they want to play again or quit
                    play_again = get_yes_no_input("Do you want to play again? "
                                                  "(yes to play, no to quit):")
                    if play_again == 'no':
                        clear_terminal()
                        console.print("[bold yellow]Thanks for playing!"
                                      " Goodbye![/bold yellow]")
                        return
                    elif play_again == 'yes':
                        clear_terminal()
                        break

                elif next_action == 'play':
                    clear_terminal()
                    break


# Execute the main function if this script is being run directly
if __name__ == "__main__":
    main()
